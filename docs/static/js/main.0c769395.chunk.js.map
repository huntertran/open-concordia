{"version":3,"sources":["context/api.js","components/Marker.js","pages/facilities/BuildingList.js","pages/facilities/Sensors.js","PrivateRoute.js","components/Dashboard.js","pages/Instruction.js","pages/Login.js","App.js","serviceWorker.js","index.js"],"names":["Api","url","this","isAuthorized","isCredentialExisted","headers","Headers","set","btoa","username","key","fetch","API_BASE_URL","method","response","localStorage","getItem","authenticatedFetch","ok","checkCredential","isCredentialCorrect","setItem","status","json","from","to","query","useStyles","makeStyles","div","position","top","left","width","height","backgroundColor","border","borderRadius","userSelect","transform","Marker","classes","className","theme","container","display","gridTemplateColumns","gridGap","spacing","paper","padding","textAlign","color","palette","text","secondary","whiteSpace","marginBottom","divider","margin","tab","minWidth","fullHeight","paddingBottom","fullContainer","TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","a11yProps","getBuilding","buildingList","root","gridTemplateRows","form","gridColumn","gridRow","textField","marginLeft","marginRight","sensorsData","flexWrap","flexDirection","sensor","flexGrow","sensorDetail","maxWidth","sensorChart","populateData","sensorName","rawData","unitLabel","populatedData","length","timedData","push","Date","label","data","PrivateRoute","Component","component","rest","render","pathname","state","location","appBar","zIndex","drawer","flexShrink","drawerPaper","drawerContainer","overflow","content","marginTop","nested","paddingLeft","routes","path","exact","useTheme","React","useState","tabPanelIndex","setTabPanelIndex","setBuildingList","loyolaBuildingList","setLoyolaBuildingList","selectedBuildingIndex","setSelectedBuildingIndex","center","setCenter","selectedBuilding","setSelectedBuilding","handleBuildingClick","event","building","Number","Latitude","Longitude","openInGoogleMapOnClick","address","window","open","useEffect","API","facilities_buildinglist","then","buildings","loyolaBuildings","filter","item","Campus","websterBuildings","Grid","xs","defaultCenter","zoom","yesIWantToUseGoogleMapApiInternals","Building_Long_Name","lat","lng","style","maxHeight","AppBar","Tabs","onChange","newValue","indicatorColor","textColor","Tab","dir","direction","List","map","ListItem","button","selected","onClick","ListItemText","primary","Building_Name","Fragment","Typography","variant","Address","ListItemSecondaryAction","Tooltip","title","IconButton","points","setPoints","setFrom","setTo","setData","facilities_pointlist","series","useMemo","showPoints","axes","type","noValidate","TextField","defaultValue","target","InputLabelProps","shrink","Button","facilities_environmental","sensorData","Point_Identifier","Units","endIcon","System_Name","Description","Building","Floor","Type_of_Measurement","Sensor_Type","tooltip","Dashboard","facilitiesOpen","setFacilitiesOpen","CssBaseline","Toolbar","noWrap","Drawer","ListItemIcon","Collapse","in","timeout","unmountOnExit","disablePadding","Link","Divider","route","formItem","Login","isLoggedIn","setLoggedIn","setUsername","setKey","login","a","loggedIn","queryString","parse","search","undefined","isOk","href","rel","App","Boolean","hostname","match","ReactDOM","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0c769395.chunk.js","sourcesContent":["export default class Api {\r\n    static API_BASE_URL = \"https://concordia-corsproxy.azurewebsites.net/open-concordia?api=\";\r\n    static username = \"\";\r\n    static key = \"\";\r\n\r\n    static isAuthorized = false;\r\n\r\n    static async authenticatedFetch(url) {\r\n        if (!this.isAuthorized) {\r\n            this.isCredentialExisted();\r\n        }\r\n\r\n        let headers = new Headers();\r\n        headers.set('Authorization', 'Basic ' + btoa(this.username + \":\" + this.key));\r\n\r\n        let response = await fetch(this.API_BASE_URL + url, {\r\n            method: \"GET\",\r\n            headers: headers\r\n        });\r\n\r\n        return response;\r\n    }\r\n\r\n    static isCredentialExisted() {\r\n        let username = localStorage.getItem(\"username\");\r\n        let key = localStorage.getItem(\"key\");\r\n\r\n        if (username && username !== \"\" && username !== \"undefined\"\r\n            && key && key !== \"\" && key !== \"undefined\") {\r\n            this.username = username;\r\n            this.key = key;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    static async checkCredential() {\r\n        let response = await this.authenticatedFetch(\"/course/catalog/filter/BIOL/200/UGRD\");\r\n        this.isAuthorized = true;\r\n        return response.ok;\r\n    }\r\n\r\n    static async login(username, key) {\r\n        this.username = username;\r\n        this.key = key;\r\n\r\n        let isCredentialCorrect = await this.checkCredential();\r\n        if (isCredentialCorrect) {\r\n            localStorage.setItem(\"username\", this.username);\r\n            localStorage.setItem(\"key\", key);\r\n        }\r\n\r\n        return isCredentialCorrect;\r\n    }\r\n\r\n    static async facilities_buildinglist() {\r\n        let response = await this.authenticatedFetch(\"/facilities/buildinglist/\");\r\n\r\n        if (response.status === 401) {\r\n            return \"test2\";\r\n        } else {\r\n            return response.json();\r\n        }\r\n    }\r\n\r\n    static async facilities_pointlist() {\r\n        let response = await this.authenticatedFetch(\"/facilities/pointlist/\");\r\n\r\n        if (response.status === 401) {\r\n            return \"test2\";\r\n        } else {\r\n            return response.json();\r\n        }\r\n    }\r\n\r\n    static async facilities_environmental(from, to) {\r\n        // /facilities/environmental/filter/2019-3-15 00:00:00/2019-3-16 00:00:00\r\n        // YYYY-MM-DD HH:MM:SS\r\n\r\n        let query = \"/facilities/environmental/filter/\"\r\n            + from + \" 00:00:00/\"\r\n            + to + \" 00:00:00\";\r\n\r\n        let response = await this.authenticatedFetch(query);\r\n\r\n        if (response.status === 401) {\r\n            return \"test2\";\r\n        } else {\r\n            return response.json();\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  div: {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    width: 18,\r\n    height: 18,\r\n    backgroundColor: '#000',\r\n    border: '2px solid #fff',\r\n    borderRadius: '100%',\r\n    userSelect: 'none',\r\n    transform: 'translate(-50%, -50%)',\r\n  }\r\n}));\r\n\r\nexport default function Marker() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.div} />\r\n  )\r\n};","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Grid,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    AppBar,\r\n    Tabs,\r\n    Tab,\r\n    Typography,\r\n    ListItemSecondaryAction,\r\n    IconButton,\r\n    Tooltip\r\n} from '@material-ui/core';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\n// import SwipeableViews from 'react-swipeable-views';\r\n\r\nimport API from './../../context/api';\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nimport Marker from './../../components/Marker';\r\n\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'grid',\r\n        gridTemplateColumns: 'repeat(12, 1fr)',\r\n        gridGap: theme.spacing(3),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(1),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n        whiteSpace: 'nowrap',\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    divider: {\r\n        margin: theme.spacing(2, 0),\r\n    },\r\n    tab: {\r\n        padding: theme.spacing(0),\r\n        width: '50%',\r\n        minWidth: '0'\r\n    },\r\n    fullHeight: {\r\n        paddingBottom: theme.spacing(8),\r\n        height: '100vh'\r\n    },\r\n    fullContainer: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <div>{children}</div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nfunction getBuilding(buildingList, index) {\r\n    return buildingList[index];\r\n}\r\n\r\nexport default function BuildingList() {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [tabPanelIndex, setTabPanelIndex] = React.useState(0);\r\n    const [buildingList, setBuildingList] = useState([]);\r\n    const [loyolaBuildingList, setLoyolaBuildingList] = useState([]);\r\n    const [selectedBuildingIndex, setSelectedBuildingIndex] = useState(0);\r\n\r\n    // maps\r\n    const [center, setCenter] = useState([45.495376, -73.577997]);\r\n    const [selectedBuilding, setSelectedBuilding] = useState();\r\n\r\n    const handleBuildingClick = (event, index) => {\r\n        setSelectedBuildingIndex(index);\r\n\r\n        let building = {};\r\n\r\n        if (tabPanelIndex === 0) {\r\n            // webster\r\n            building = getBuilding(buildingList, selectedBuildingIndex);\r\n        } else {\r\n            building = getBuilding(loyolaBuildingList, selectedBuildingIndex);\r\n        }\r\n\r\n        setSelectedBuilding(building);\r\n        setCenter([Number(building.Latitude), Number(building.Longitude)]);\r\n    }\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setTabPanelIndex(newValue);\r\n    };\r\n\r\n    // const handleChangeIndex = (index) => {\r\n    //     setTabPanelIndex(index);\r\n    // };\r\n\r\n    const openInGoogleMapOnClick = (address) => {\r\n        window.open(\"https://www.google.com/maps/search/?api=1&query=\" + address);\r\n    }\r\n\r\n    useEffect(() => {\r\n        API.facilities_buildinglist().then((buildings) => {\r\n            let loyolaBuildings = buildings.filter(function (item) {\r\n                return item.Campus === \"LOY\";\r\n            });\r\n\r\n            let websterBuildings = buildings.filter(function (item) {\r\n                return item.Campus === \"SGW\";\r\n            });\r\n\r\n            setLoyolaBuildingList(loyolaBuildings);\r\n            setBuildingList(websterBuildings);\r\n        });\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Grid container spacing={1} className={classes.fullHeight}>\r\n                <Grid item xs={8} className={classes.fullContainer}>\r\n                    <GoogleMapReact\r\n                        defaultCenter={[45.495376, -73.577997]}\r\n                        center={center}\r\n                        zoom={15}\r\n                        yesIWantToUseGoogleMapApiInternals={true}\r\n                    >\r\n                        {selectedBuilding &&\r\n                            <Marker\r\n                                text={selectedBuilding.Building_Long_Name}\r\n                                lat={selectedBuilding.Latitude}\r\n                                lng={selectedBuilding.Longitude}\r\n                            />\r\n                        }\r\n                    </GoogleMapReact>\r\n                </Grid>\r\n                <Grid item xs={4} style={{ maxHeight: '100%', overflow: 'auto' }}>\r\n                    <AppBar position=\"static\" color=\"default\">\r\n                        <Tabs\r\n                            value={tabPanelIndex}\r\n                            onChange={handleChange}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                        >\r\n                            <Tab className={classes.tab} label=\"Webster\" {...a11yProps(0)} />\r\n                            <Tab className={classes.tab} label=\"Loyola\" {...a11yProps(1)} />\r\n                        </Tabs>\r\n                    </AppBar>\r\n                    {/* <SwipeableViews\r\n                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                        index={tabPanelIndex}\r\n                        onChangeIndex={handleChangeIndex}\r\n                    > */}\r\n                        <TabPanel value={tabPanelIndex} index={0} dir={theme.direction}>\r\n                            <List component=\"nav\">\r\n                                {buildingList.map((building, index) => (\r\n                                    <ListItem\r\n                                        key={index}\r\n                                        button\r\n                                        selected={selectedBuildingIndex === index}\r\n                                        onClick={(event) => handleBuildingClick(event, index)}\r\n                                    >\r\n                                        <ListItemText primary={building.Building_Name}\r\n                                            secondary={\r\n                                                <React.Fragment>\r\n                                                    <Typography component=\"span\"\r\n                                                        variant=\"body2\"\r\n                                                        color=\"textSecondary\">{building.Building_Long_Name}</Typography>\r\n                                                    <br />\r\n                                                    <Typography component=\"span\"\r\n                                                        variant=\"body2\"\r\n                                                        color=\"textSecondary\">{building.Address}</Typography>\r\n                                                </React.Fragment>\r\n                                            } />\r\n                                        <ListItemSecondaryAction>\r\n                                            <Tooltip title=\"Open in Google Map\">\r\n                                                <IconButton onClick={() => openInGoogleMapOnClick(building.Address)}>\r\n                                                    <ExitToAppIcon />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ))}\r\n                            </List>\r\n                        </TabPanel>\r\n                        <TabPanel value={tabPanelIndex} index={1} dir={theme.direction}>\r\n                            <List component=\"nav\">\r\n                                {loyolaBuildingList.map((building, index) => (\r\n                                    <ListItem\r\n                                        key={index}\r\n                                        button\r\n                                        selected={selectedBuildingIndex === index}\r\n                                        onClick={(event) => handleBuildingClick(event, index)}\r\n                                    >\r\n                                        <ListItemText primary={building.Building_Name}\r\n                                            secondary={\r\n                                                <React.Fragment>\r\n                                                    <Typography component=\"span\"\r\n                                                        variant=\"body2\"\r\n                                                        color=\"textSecondary\">{building.Building_Long_Name}</Typography>\r\n                                                    <br />\r\n                                                    <Typography component=\"span\"\r\n                                                        variant=\"body2\"\r\n                                                        color=\"textSecondary\">{building.Address}</Typography>\r\n                                                </React.Fragment>\r\n                                            } />\r\n                                        <ListItemSecondaryAction>\r\n                                            <Tooltip title=\"Open in Google Map\">\r\n                                                <IconButton onClick={() => openInGoogleMapOnClick(building.Address)}>\r\n                                                    <ExitToAppIcon />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ))}\r\n                            </List>\r\n                        </TabPanel>\r\n                    {/* </SwipeableViews> */}\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}","import {\r\n    makeStyles,\r\n    TextField,\r\n    Button,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport Api from \"../../context/api\";\r\n\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\n\r\nimport { Chart } from 'react-charts'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        display: 'grid',\r\n        gridTemplateColumns: '100%',\r\n        gridTemplateRows: 'minmax(min-content, max-content) auto'\r\n    },\r\n    form: {\r\n        gridColumn: '1',\r\n        gridRow: '1'\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n    sensorsData: {\r\n        gridColumn: '1',\r\n        gridRow: '2',\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row'\r\n    },\r\n    sensor: {\r\n        flexGrow: 1,\r\n        height: 300,\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row'\r\n    },\r\n    sensorDetail: {\r\n        flexGrow: 1,\r\n        maxWidth: 250\r\n    },\r\n    sensorChart: {\r\n        flexGrow: 3\r\n    }\r\n}));\r\n\r\nfunction populateData(sensorName, rawData, unitLabel) {\r\n    let populatedData = [];\r\n\r\n    for (let index = 0; index < rawData.length; index++) {\r\n        const timedData = rawData[index];\r\n        populatedData.push([new Date(rawData[index].Date), timedData[sensorName]]);\r\n    }\r\n\r\n    return {\r\n        label: unitLabel,\r\n        data: populatedData\r\n    };\r\n}\r\n\r\nexport default function Sensors() {\r\n    const classes = useStyles();\r\n    const [points, setPoints] = useState();\r\n    const [from, setFrom] = useState(new Date());\r\n    const [to, setTo] = useState(new Date());\r\n    const [data, setData] = useState([]);\r\n\r\n    const fromChanged = (event) => {\r\n        setFrom(event.target.value);\r\n    };\r\n\r\n    const toChanged = (event) => {\r\n        setTo(event.target.value);\r\n    };\r\n\r\n    const getButtonClicked = () => {\r\n        Api.facilities_environmental(from, to).then((value) => {\r\n            let sensorData = []\r\n            for (let index = 0; index < points.length; index++) {\r\n                sensorData.push([populateData(points[index].Point_Identifier, value, points[index].Units)]);\r\n            }\r\n\r\n            setData(sensorData);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        Api.facilities_pointlist().then(setPoints);\r\n    }, []);\r\n\r\n    const series = React.useMemo(\r\n        () => ({\r\n            showPoints: true\r\n        }),\r\n        []\r\n    )\r\n\r\n    const axes = React.useMemo(\r\n        () => [\r\n            { primary: true, type: 'time', position: 'bottom' },\r\n            { type: 'linear', position: 'left' },\r\n        ],\r\n        []\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <form className={classes.form} noValidate>\r\n                <TextField\r\n                    id=\"date\"\r\n                    label=\"From\"\r\n                    type=\"date\"\r\n                    defaultValue={from}\r\n                    onChange={fromChanged}\r\n                    className={classes.textField}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n                <TextField\r\n                    id=\"date\"\r\n                    label=\"To\"\r\n                    type=\"date\"\r\n                    defaultValue={to}\r\n                    onChange={toChanged}\r\n                    className={classes.textField}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    onClick={getButtonClicked}\r\n                    endIcon={<GetAppIcon />}\r\n                >\r\n                    Get Data\r\n                </Button>\r\n            </form>\r\n            <div className={classes.sensorsData}>\r\n                {points && points.map((sensor, index) => (\r\n                    <div key={sensor.Point_Identifier} className={classes.sensor}>\r\n                        <div className={classes.sensorDetail}>\r\n                            <Typography>Name: {sensor.System_Name}</Typography>\r\n                            <Typography>Description: {sensor.Description}</Typography>\r\n                            <Typography>Building: {sensor.Building}</Typography>\r\n                            <Typography>Floor: {sensor.Floor}</Typography>\r\n                            <Typography>Meaning: {sensor.Type_of_Measurement}</Typography>\r\n                            <Typography>Units:{sensor.Units}</Typography>\r\n                            <Typography>Sensor: {sensor.Sensor_Type}</Typography>\r\n                        </div>\r\n                        <div className={classes.sensorChart}>\r\n                            {data[index] &&\r\n                                <Chart data={data[index]} axes={axes} series={series} tooltip />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport Api from './context/api';\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => Api.isAuthorized\r\n                ? <Component {...props} />\r\n                : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PrivateRoute;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport { Switch, Link } from \"react-router-dom\";\r\n\r\nimport Collapse from '@material-ui/core/Collapse';\r\n\r\nimport ApartmentIcon from '@material-ui/icons/Apartment';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport LocalConvenienceStoreIcon from '@material-ui/icons/LocalConvenienceStore';\r\nimport MemoryIcon from '@material-ui/icons/Memory';\r\n\r\nimport Instruction from '../pages/Instruction';\r\nimport BuildingList from '../pages/facilities/BuildingList';\r\nimport Sensors from '../pages/facilities/Sensors';\r\n\r\nimport PrivateRoute from './../PrivateRoute';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n    content: {\r\n        width: 'calc(100vw - 240px)',\r\n        padding: theme.spacing(1),\r\n        marginTop: theme.spacing(8),\r\n        height: 'calc(100vh - 68px)'\r\n    },\r\n    nested: {\r\n        paddingLeft: theme.spacing(4),\r\n    },\r\n}));\r\n\r\nconst routes = [\r\n    {\r\n        path: \"/dashboard\",\r\n        exact: true,\r\n        component: Instruction\r\n    },\r\n    {\r\n        path: \"/dashboard/facilities/buildinglist\",\r\n        component: BuildingList\r\n    },\r\n    {\r\n        path: \"/dashboard/facilities/sensors\",\r\n        component: Sensors\r\n    }\r\n]\r\n\r\nexport default function Dashboard() {\r\n    const classes = useStyles();\r\n\r\n    const [facilitiesOpen, setFacilitiesOpen] = React.useState(true);\r\n\r\n    const handleFacilitiesClick = () => {\r\n        setFacilitiesOpen(!facilitiesOpen);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        Concordia Open Data\r\n                        </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <Toolbar />\r\n                <div className={classes.drawerContainer}>\r\n                    <List>\r\n                        <ListItem button onClick={handleFacilitiesClick}>\r\n                            <ListItemIcon>\r\n                                <ApartmentIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Facilities\" />\r\n                            {facilitiesOpen ? <ExpandLess /> : <ExpandMore />}\r\n                        </ListItem>\r\n                        <Collapse in={facilitiesOpen} timeout=\"auto\" unmountOnExit>\r\n                            <List component=\"div\" disablePadding>\r\n                                <ListItem button className={classes.nested} component={Link} to=\"/dashboard/facilities/buildinglist\">\r\n                                    <ListItemIcon>\r\n                                        <LocalConvenienceStoreIcon />\r\n                                    </ListItemIcon>\r\n                                    <ListItemText primary=\"Building List\" />\r\n                                </ListItem>\r\n                                <ListItem button className={classes.nested} component={Link} to=\"/dashboard/facilities/sensors\">\r\n                                    <ListItemIcon>\r\n                                        <MemoryIcon />\r\n                                    </ListItemIcon>\r\n                                    <ListItemText primary=\"Sensors\" />\r\n                                </ListItem>\r\n                            </List>\r\n                        </Collapse>\r\n                    </List>\r\n                    <Divider />\r\n                    <List>\r\n                    </List>\r\n                </div>\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <Switch>\r\n                    {routes.map((route, index) => (\r\n                        <PrivateRoute\r\n                            key={index}\r\n                            exact={route.exact}\r\n                            path={route.path}\r\n                            component={route.component}\r\n                        />\r\n                    ))}\r\n                </Switch>\r\n            </main>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function Instruction() {\r\n    return (\r\n        <div>\r\n            click on an item in sidebar to see data\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\n\r\nimport { TextField, Button, makeStyles } from '@material-ui/core';\r\n\r\nimport queryString from 'query-string';\r\n\r\nimport API from './../context/api';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    },\r\n    formItem: {\r\n        display: 'block',\r\n        margin: theme.spacing(2)\r\n    },\r\n    center: {\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n        display: 'block'\r\n    }\r\n}));\r\n\r\nfunction Login() {\r\n    const classes = useStyles();\r\n    const [isLoggedIn, setLoggedIn] = useState(false);\r\n    const [username, setUsername] = useState(localStorage.getItem(\"username\"));\r\n    const [key, setKey] = useState(localStorage.getItem(\"key\"));\r\n\r\n    // const { routeUsername, routeKey } = useParams();\r\n\r\n    const login = async () => {\r\n        let loggedIn = await API.login(username, key);\r\n        setLoggedIn(loggedIn);\r\n    }\r\n\r\n    const usernameChanged = (event) => {\r\n        setUsername(event.target.value);\r\n    }\r\n\r\n    const keyChanged = (event) => {\r\n        setKey(event.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // let credentialExisted = API.isCredentialExisted();\r\n        // if (credentialExisted) {\r\n        //     API.login(username, key)\r\n        //         .then((isOk) => {\r\n        //             setLoggedIn(isOk);\r\n        //         });\r\n        // };\r\n\r\n        const query = queryString.parse(window.location.search);\r\n\r\n        if (query.username !== undefined && query.key !== undefined\r\n            && query.username !== \"\" && query.key !== \"\") {\r\n            setUsername(query.username);\r\n            setKey(query.key);\r\n            API.login(query.username, query.key)\r\n                .then((isOk) => {\r\n                    setLoggedIn(isOk);\r\n                });\r\n        }\r\n    }, []);\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/dashboard\" />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <form>\r\n                <TextField\r\n                    className={classes.formItem}\r\n                    label=\"Username\"\r\n                    type=\"text\"\r\n                    value={username}\r\n                    onChange={usernameChanged}\r\n                    variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                    label=\"key\"\r\n                    className={classes.formItem}\r\n                    type=\"password\"\r\n                    value={key}\r\n                    variant=\"outlined\"\r\n                    onChange={keyChanged}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.center}\r\n                    onClick={login}>Login</Button>\r\n            </form>\r\n            <a className={classes.center}\r\n                href=\"https://opendata.concordia.ca/admin/register.php\"\r\n                rel=\"noopener noreferrer\"\r\n                target=\"_blank\">Don't have an account?</a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import './App.css';\n\nimport React from 'react';\nimport Dashboard from \"./components/Dashboard\";\nimport Login from './pages/Login';\n\nimport { Route, Switch } from \"react-router-dom\";\n\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  return (\n    <Switch>\n      <PrivateRoute path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/login\" exact={true} component={Login} />\n      <Route path=\"/:routeUsername?/:routeKey?\" exact={true} component={Login} />\n    </Switch>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/open-concordia\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}