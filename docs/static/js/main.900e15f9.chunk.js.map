{"version":3,"sources":["context/api.js","components/Marker.js","pages/facilities/BuildingList.js","components/AuthForm.js","pages/Login.js","pages/facilities/Sensors.js","components/Dashboard.js","pages/Instruction.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Api","url","this","isAuthorized","getExistingCredential","headers","Headers","set","btoa","username","key","fetch","API_BASE_URL","method","response","localStorage","getItem","authenticatedFetch","ok","checkCredential","isCredentialCorrect","setItem","status","json","from","to","query","Wrapper","styled","div","props","onClick","Marker","alt","text","defaultProps","useStyles","makeStyles","theme","container","display","gridTemplateColumns","gridGap","spacing","paper","padding","textAlign","color","palette","secondary","whiteSpace","marginBottom","divider","margin","tab","width","minWidth","fullHeight","paddingBottom","height","fullContainer","TabPanel","children","value","index","other","role","hidden","id","aria-labelledby","a11yProps","getBuilding","buildingList","Card","Form","Input","input","Button","button","Logo","img","Error","Login","useState","isLoggedIn","setLoggedIn","isError","setUsername","password","setPassword","login","a","API","loggedIn","src","logoImg","type","onChange","e","target","placeholder","href","rel","root","gridTemplateRows","form","gridColumn","gridRow","textField","marginLeft","marginRight","sensorsData","flexWrap","flexDirection","sensor","flexGrow","sensorDetail","maxWidth","sensorChart","populateData","sensorName","rawData","populatedData","length","timedData","push","label","data","appBar","zIndex","drawer","flexShrink","drawerPaper","drawerContainer","overflow","content","marginTop","nested","paddingLeft","routes","path","exact","component","classes","useTheme","React","tabPanelIndex","setTabPanelIndex","setBuildingList","loyolaBuildingList","setLoyolaBuildingList","selectedBuildingIndex","setSelectedBuildingIndex","center","setCenter","selectedBuilding","setSelectedBuilding","handleBuildingClick","event","building","Number","Latitude","Longitude","openInGoogleMapOnClick","address","window","open","useEffect","facilities_buildinglist","then","buildings","loyolaBuildings","filter","item","Campus","websterBuildings","Grid","className","xs","defaultCenter","zoom","yesIWantToUseGoogleMapApiInternals","Building_Long_Name","lat","lng","style","maxHeight","AppBar","position","Tabs","newValue","indicatorColor","textColor","Tab","axis","direction","onChangeIndex","dir","List","map","ListItem","selected","ListItemText","primary","Building_Name","Fragment","Typography","variant","Address","ListItemSecondaryAction","Tooltip","title","IconButton","setPoints","setSensorReadings","Date","setFrom","setTo","setData","facilities_pointlist","series","useMemo","showPoints","axes","noValidate","TextField","defaultValue","InputLabelProps","shrink","facilities_environmental","endIcon","tooltip","Dashboard","facilitiesOpen","setFacilitiesOpen","basename","CssBaseline","Toolbar","noWrap","Drawer","ListItemIcon","Collapse","in","timeout","unmountOnExit","disablePadding","Link","Divider","route","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.900e15f9.chunk.js","sourcesContent":["export default class Api {\r\n    static API_BASE_URL = \"https://concordia-corsproxy.azurewebsites.net/open-concordia?api=\";\r\n    static username = \"\";\r\n    static key = \"\";\r\n\r\n    static isAuthorized = false;\r\n\r\n    static async authenticatedFetch(url) {\r\n        if (!this.isAuthorized) {\r\n            this.getExistingCredential();\r\n        }\r\n\r\n        let headers = new Headers();\r\n        headers.set('Authorization', 'Basic ' + btoa(this.username + \":\" + this.key));\r\n\r\n        let response = await fetch(this.API_BASE_URL + url, {\r\n            method: \"GET\",\r\n            headers: headers\r\n        });\r\n\r\n        return response;\r\n    }\r\n\r\n    static getExistingCredential() {\r\n        let username = localStorage.getItem(\"username\");\r\n        let key = localStorage.getItem(\"key\");\r\n\r\n        if (username && username !== \"\"\r\n            && key && key !== \"\") {\r\n            this.username = username;\r\n            this.key = key;\r\n        }\r\n    };\r\n\r\n    static async checkCredential() {\r\n        let response = await this.authenticatedFetch(\"/course/catalog/filter/BIOL/200/UGRD\");\r\n        this.isAuthorized = true;\r\n        return response.ok;\r\n    }\r\n\r\n    static async login(username, key) {\r\n        this.username = username;\r\n        this.key = key;\r\n\r\n        let isCredentialCorrect = await this.checkCredential();\r\n        if (isCredentialCorrect) {\r\n            localStorage.setItem(\"username\", this.username);\r\n            localStorage.setItem(\"key\", key);\r\n        }\r\n\r\n        return isCredentialCorrect;\r\n    }\r\n\r\n    static async facilities_buildinglist() {\r\n        let response = await this.authenticatedFetch(\"/facilities/buildinglist/\");\r\n\r\n        if (response.status === 401) {\r\n            return \"test2\";\r\n        } else {\r\n            return response.json();\r\n        }\r\n    }\r\n\r\n    static async facilities_pointlist() {\r\n        let response = await this.authenticatedFetch(\"/facilities/pointlist/\");\r\n\r\n        if (response.status === 401) {\r\n            return \"test2\";\r\n        } else {\r\n            return response.json();\r\n        }\r\n    }\r\n\r\n    static async facilities_environmental(from, to) {\r\n        // /facilities/environmental/filter/2019-3-15 00:00:00/2019-3-16 00:00:00\r\n        // YYYY-MM-DD HH:MM:SS\r\n\r\n        let query = \"/facilities/environmental/filter/\"\r\n            + from + \" 00:00:00/\"\r\n            + to + \" 00:00:00\";\r\n\r\n        let response = await this.authenticatedFetch(query);\r\n\r\n        if (response.status === 401) {\r\n            return \"test2\";\r\n        } else {\r\n            return response.json();\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 18px;\r\n  height: 18px;\r\n  background-color: #000;\r\n  border: 2px solid #fff;\r\n  border-radius: 100%;\r\n  user-select: none;\r\n  transform: translate(-50%, -50%);\r\n  cursor: ${props => (props.onClick ? 'pointer' : 'default')};\r\n  &:hover {\r\n    z-index: 1;\r\n  }\r\n`;\r\n\r\nconst Marker = props => (\r\n    <Wrapper\r\n        alt={props.text}\r\n        {...props.onClick ? { onClick: props.onClick } : {}}\r\n    />\r\n);\r\n\r\nMarker.defaultProps = {\r\n    onClick: null,\r\n};\r\n\r\nMarker.propTypes = {\r\n    onClick: PropTypes.func,\r\n    text: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Marker;","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Grid,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    AppBar,\r\n    Tabs,\r\n    Tab,\r\n    Typography,\r\n    ListItemSecondaryAction,\r\n    IconButton,\r\n    Tooltip\r\n} from '@material-ui/core';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\n\r\nimport API from './../../context/api';\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nimport Marker from './../../components/Marker';\r\n\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'grid',\r\n        gridTemplateColumns: 'repeat(12, 1fr)',\r\n        gridGap: theme.spacing(3),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(1),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n        whiteSpace: 'nowrap',\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    divider: {\r\n        margin: theme.spacing(2, 0),\r\n    },\r\n    tab: {\r\n        padding: theme.spacing(0),\r\n        width: '50%',\r\n        minWidth: '0'\r\n    },\r\n    fullHeight: {\r\n        paddingBottom: theme.spacing(8),\r\n        height: '100vh'\r\n    },\r\n    fullContainer: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <div>{children}</div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nfunction getBuilding(buildingList, index) {\r\n    return buildingList[index];\r\n}\r\n\r\nexport default function BuildingList() {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [tabPanelIndex, setTabPanelIndex] = React.useState(0);\r\n    const [buildingList, setBuildingList] = useState([]);\r\n    const [loyolaBuildingList, setLoyolaBuildingList] = useState([]);\r\n    const [selectedBuildingIndex, setSelectedBuildingIndex] = useState(0);\r\n\r\n    // maps\r\n    const [center, setCenter] = useState([45.495376, -73.577997]);\r\n    const [selectedBuilding, setSelectedBuilding] = useState();\r\n\r\n    const handleBuildingClick = (event, index) => {\r\n        setSelectedBuildingIndex(index);\r\n\r\n        let building = {};\r\n\r\n        if (tabPanelIndex === 0) {\r\n            // webster\r\n            building = getBuilding(buildingList, selectedBuildingIndex);\r\n        } else {\r\n            building = getBuilding(loyolaBuildingList, selectedBuildingIndex);\r\n        }\r\n\r\n        setSelectedBuilding(building);\r\n        setCenter([Number(building.Latitude), Number(building.Longitude)]);\r\n    }\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setTabPanelIndex(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setTabPanelIndex(index);\r\n    };\r\n\r\n    const openInGoogleMapOnClick = (address) => {\r\n        window.open(\"https://www.google.com/maps/search/?api=1&query=\" + address);\r\n    }\r\n\r\n    useEffect(() => {\r\n        API.facilities_buildinglist().then((buildings) => {\r\n            let loyolaBuildings = buildings.filter(function (item) {\r\n                return item.Campus === \"LOY\";\r\n            });\r\n\r\n            let websterBuildings = buildings.filter(function (item) {\r\n                return item.Campus === \"SGW\";\r\n            });\r\n\r\n            setLoyolaBuildingList(loyolaBuildings);\r\n            setBuildingList(websterBuildings);\r\n        });\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Grid container spacing={1} className={classes.fullHeight}>\r\n                <Grid item xs={8} className={classes.fullContainer}>\r\n                    <GoogleMapReact\r\n                        defaultCenter={[45.495376, -73.577997]}\r\n                        center={center}\r\n                        zoom={15}\r\n                        yesIWantToUseGoogleMapApiInternals={true}\r\n                    >\r\n                        {selectedBuilding &&\r\n                            <Marker\r\n                                text={selectedBuilding.Building_Long_Name}\r\n                                lat={selectedBuilding.Latitude}\r\n                                lng={selectedBuilding.Longitude}\r\n                            />\r\n                        }\r\n                    </GoogleMapReact>\r\n                </Grid>\r\n                <Grid item xs={4} style={{ maxHeight: '100%', overflow: 'auto' }}>\r\n                    <AppBar position=\"static\" color=\"default\">\r\n                        <Tabs\r\n                            value={tabPanelIndex}\r\n                            onChange={handleChange}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                        >\r\n                            <Tab className={classes.tab} label=\"Webster\" {...a11yProps(0)} />\r\n                            <Tab className={classes.tab} label=\"Loyola\" {...a11yProps(1)} />\r\n                        </Tabs>\r\n                    </AppBar>\r\n                    <SwipeableViews\r\n                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                        index={tabPanelIndex}\r\n                        onChangeIndex={handleChangeIndex}\r\n                    >\r\n                        <TabPanel value={tabPanelIndex} index={0} dir={theme.direction}>\r\n                            <List component=\"nav\">\r\n                                {buildingList.map((building, index) => (\r\n                                    <ListItem\r\n                                        key={index}\r\n                                        button\r\n                                        selected={selectedBuildingIndex === index}\r\n                                        onClick={(event) => handleBuildingClick(event, index)}\r\n                                    >\r\n                                        <ListItemText primary={building.Building_Name}\r\n                                            secondary={\r\n                                                <React.Fragment>\r\n                                                    <Typography component=\"span\"\r\n                                                        variant=\"body2\"\r\n                                                        color=\"textSecondary\">{building.Building_Long_Name}</Typography>\r\n                                                    <br />\r\n                                                    <Typography component=\"span\"\r\n                                                        variant=\"body2\"\r\n                                                        color=\"textSecondary\">{building.Address}</Typography>\r\n                                                </React.Fragment>\r\n                                            } />\r\n                                        <ListItemSecondaryAction>\r\n                                            <Tooltip title=\"Open in Google Map\">\r\n                                                <IconButton onClick={() => openInGoogleMapOnClick(building.Address)}>\r\n                                                    <ExitToAppIcon />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ))}\r\n                            </List>\r\n                        </TabPanel>\r\n                        <TabPanel value={tabPanelIndex} index={1} dir={theme.direction}>\r\n                            <List component=\"nav\">\r\n                                {loyolaBuildingList.map((building, index) => (\r\n                                    <ListItem\r\n                                        key={index}\r\n                                        button\r\n                                        selected={selectedBuildingIndex === index}\r\n                                        onClick={(event) => handleBuildingClick(event, index)}\r\n                                    >\r\n                                        <ListItemText primary={building.Building_Name}\r\n                                            secondary={\r\n                                                <React.Fragment>\r\n                                                    <Typography component=\"span\"\r\n                                                        variant=\"body2\"\r\n                                                        color=\"textSecondary\">{building.Building_Long_Name}</Typography>\r\n                                                    <br />\r\n                                                    <Typography component=\"span\"\r\n                                                        variant=\"body2\"\r\n                                                        color=\"textSecondary\">{building.Address}</Typography>\r\n                                                </React.Fragment>\r\n                                            } />\r\n                                        <ListItemSecondaryAction>\r\n                                            <Tooltip title=\"Open in Google Map\">\r\n                                                <IconButton onClick={() => openInGoogleMapOnClick(building.Address)}>\r\n                                                    <ExitToAppIcon />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ))}\r\n                            </List>\r\n                        </TabPanel>\r\n                    </SwipeableViews>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}","import styled from 'styled-components';\r\n\r\nconst Card = styled.div`\r\n  box-sizing: border-box;\r\n  max-width: 410px;\r\n  margin: 0 auto;\r\n  padding: 0 2rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Form = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 1rem;\r\n  border: 1px solid #999;\r\n  margin-bottom: 1rem;\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background: linear-gradient(to bottom, #6371c7, #5563c1);\r\n  border-color: #3f4eae;\r\n  border-radius: 3px;\r\n  padding: 1rem;\r\n  color: white;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  margin-bottom: 1rem;\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: 50%;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst Error = styled.div`\r\n  background-color: red;\r\n`;\r\n\r\nexport { Form, Input, Button, Logo, Card, Error };","import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport logoImg from './../logo.svg'\r\nimport { Card, Logo, Form, Input, Button, Error } from './../components/AuthForm'\r\n\r\nimport API from './../context/api';\r\n\r\nfunction Login() {\r\n    const [isLoggedIn, setLoggedIn] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const login = async() => {\r\n        let loggedIn = await API.login(username, password);\r\n        setLoggedIn(loggedIn);\r\n    }\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <Logo src={logoImg} />\r\n            <Form>\r\n                <Input\r\n                    type=\"username\"\r\n                    value={username}\r\n                    onChange={e => {\r\n                        setUsername(e.target.value);\r\n                    }}\r\n                    placeholder=\"email\"\r\n                />\r\n                <Input\r\n                    type=\"password\"\r\n                    value={password}\r\n                    onChange={e => {\r\n                        setPassword(e.target.value);\r\n                    }}\r\n                    placeholder=\"password\"\r\n                />\r\n                <Button onClick={login}>Sign In</Button>\r\n            </Form>\r\n            <a href=\"https://opendata.concordia.ca/admin/register.php\"\r\n                rel=\"noopener noreferrer\"\r\n                target=\"_blank\">Don't have an account?</a>\r\n            {isError && <Error>The username or password provided were incorrect!</Error>}\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Login;","import {\r\n    makeStyles,\r\n    TextField,\r\n    Button,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport Api from \"../../context/api\";\r\n\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\n\r\nimport { Chart } from 'react-charts'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        display: 'grid',\r\n        gridTemplateColumns: '100%',\r\n        gridTemplateRows: 'minmax(min-content, max-content) auto'\r\n    },\r\n    form: {\r\n        gridColumn: '1',\r\n        gridRow: '1'\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n    sensorsData: {\r\n        gridColumn: '1',\r\n        gridRow: '2',\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row'\r\n    },\r\n    sensor: {\r\n        flexGrow: 1,\r\n        height: 300,\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row'\r\n    },\r\n    sensorDetail: {\r\n        flexGrow: 1,\r\n        maxWidth: 250\r\n    },\r\n    sensorChart: {\r\n        flexGrow: 3\r\n    }\r\n}));\r\n\r\nfunction populateData(sensorName, rawData) {\r\n    let populatedData = [];\r\n\r\n    for (let index = 0; index < rawData.length; index++) {\r\n        const timedData = rawData[index];\r\n        populatedData.push([index, timedData[sensorName]]);\r\n    }\r\n\r\n    return {\r\n        label: \"W/m2\",\r\n        data: populatedData\r\n    };\r\n}\r\n\r\nexport default function Sensors() {\r\n    const classes = useStyles();\r\n    const [points, setPoints] = useState();\r\n    const [sensorReadings, setSensorReadings] = useState([]);\r\n    const [from, setFrom] = useState(new Date());\r\n    const [to, setTo] = useState(new Date());\r\n    const [data, setData] = useState([]);\r\n\r\n    const fromChanged = (event) => {\r\n        setFrom(event.target.value);\r\n    };\r\n\r\n    const toChanged = (event) => {\r\n        setTo(event.target.value);\r\n    };\r\n\r\n    const getButtonClicked = () => {\r\n        Api.facilities_environmental(from, to).then((value) => {\r\n            setSensorReadings(value);\r\n            setData([populateData(\"Point_1\", value)]);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        Api.facilities_pointlist().then(setPoints);\r\n    }, []);\r\n\r\n    // const data = React.useMemo(\r\n    //     () => [\r\n    //         {\r\n    //             label: 'Series 1',\r\n    //             data: [\r\n    //                 [0, 1],\r\n    //                 [1, 2],\r\n    //                 [2, 4],\r\n    //                 [3, 2],\r\n    //                 [4, 7],\r\n    //             ],\r\n    //         }\r\n    //     ],\r\n    //     []\r\n    // );\r\n\r\n    const series = React.useMemo(\r\n        () => ({\r\n            showPoints: false\r\n        }),\r\n        []\r\n    )\r\n\r\n    const axes = React.useMemo(\r\n        () => [\r\n            { primary: true, type: 'time', position: 'bottom' },\r\n            { type: 'linear', position: 'left' },\r\n        ],\r\n        []\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <form className={classes.form} noValidate>\r\n                <TextField\r\n                    id=\"date\"\r\n                    label=\"From\"\r\n                    type=\"date\"\r\n                    defaultValue={from}\r\n                    onChange={fromChanged}\r\n                    className={classes.textField}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n                <TextField\r\n                    id=\"date\"\r\n                    label=\"To\"\r\n                    type=\"date\"\r\n                    defaultValue={to}\r\n                    onChange={toChanged}\r\n                    className={classes.textField}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    onClick={getButtonClicked}\r\n                    endIcon={<GetAppIcon />}\r\n                >\r\n                    Get Data\r\n                </Button>\r\n            </form>\r\n            <div className={classes.sensorsData}>\r\n                <div className={classes.sensor}>\r\n                    <div className={classes.sensorDetail}>\r\n                        <Typography>Name: MHL1-017.IC</Typography>\r\n                        <Typography>Description: Outdoor Temperature Sensor of EV weather station</Typography>\r\n                        <Typography>Building: EV</Typography>\r\n                        <Typography>Floor: 17M</Typography>\r\n                        <Typography>Meaning: Solar Irradiance</Typography>\r\n                        <Typography>Units: W/m2</Typography>\r\n                        <Typography>Sensor: Pyrometer</Typography>\r\n                    </div>\r\n                    <div className={classes.sensorChart}>\r\n                        <Chart data={data} axes={axes} series={series} tooltip />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport { Route, Switch, BrowserRouter, Link } from \"react-router-dom\";\r\n\r\nimport Collapse from '@material-ui/core/Collapse';\r\n\r\nimport ApartmentIcon from '@material-ui/icons/Apartment';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport LocalConvenienceStoreIcon from '@material-ui/icons/LocalConvenienceStore';\r\nimport MemoryIcon from '@material-ui/icons/Memory';\r\n\r\nimport Instruction from '../pages/Instruction';\r\nimport BuildingList from '../pages/facilities/BuildingList';\r\nimport Login from '../pages/Login';\r\nimport Sensors from '../pages/facilities/Sensors';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n    content: {\r\n        width: 'calc(100vw - 240px)',\r\n        padding: theme.spacing(1),\r\n        marginTop: theme.spacing(8),\r\n        height: 'calc(100vh - 68px)'\r\n    },\r\n    nested: {\r\n        paddingLeft: theme.spacing(4),\r\n    },\r\n}));\r\n\r\nconst routes = [\r\n    {\r\n        path: \"/\",\r\n        exact: true,\r\n        component: Instruction\r\n    },\r\n    {\r\n        path: \"/login\",\r\n        component: Login\r\n    },\r\n    {\r\n        path: \"/facilities/buildinglist\",\r\n        component: BuildingList\r\n    },\r\n    {\r\n        path: \"/facilities/sensors\",\r\n        component: Sensors\r\n    }\r\n]\r\n\r\nexport default function Dashboard() {\r\n    const classes = useStyles();\r\n\r\n    const [facilitiesOpen, setFacilitiesOpen] = React.useState(true);\r\n\r\n    const handleFacilitiesClick = () => {\r\n        setFacilitiesOpen(!facilitiesOpen);\r\n    };\r\n\r\n    return (\r\n        <BrowserRouter basename=\"/open-concordia\">\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n                <AppBar position=\"fixed\" className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            Concordia Open Data\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    className={classes.drawer}\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: classes.drawerPaper,\r\n                    }}\r\n                >\r\n                    <Toolbar />\r\n                    <div className={classes.drawerContainer}>\r\n                        <List>\r\n                            <ListItem button onClick={handleFacilitiesClick}>\r\n                                <ListItemIcon>\r\n                                    <ApartmentIcon />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"Facilities\" />\r\n                                {facilitiesOpen ? <ExpandLess /> : <ExpandMore />}\r\n                            </ListItem>\r\n                            <Collapse in={facilitiesOpen} timeout=\"auto\" unmountOnExit>\r\n                                <List component=\"div\" disablePadding>\r\n                                    <ListItem button className={classes.nested} component={Link} to=\"/facilities/buildinglist\">\r\n                                        <ListItemIcon>\r\n                                            <LocalConvenienceStoreIcon />\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"Building List\" />\r\n                                    </ListItem>\r\n                                    <ListItem button className={classes.nested} component={Link} to=\"/facilities/sensors\">\r\n                                        <ListItemIcon>\r\n                                            <MemoryIcon />\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"Sensors\" />\r\n                                    </ListItem>\r\n                                </List>\r\n                            </Collapse>\r\n                        </List>\r\n                        <Divider />\r\n                        <List>\r\n                        </List>\r\n                    </div>\r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <Switch>\r\n                        {routes.map((route, index) => (\r\n                            <Route\r\n                                key={index}\r\n                                exact={route.exact}\r\n                                path={route.path}\r\n                                component={route.component}\r\n                            />\r\n                        ))}\r\n                    </Switch>\r\n                </main>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function Instruction() {\r\n    return (\r\n        <div>\r\n            click on an item in sidebar to see data\r\n        </div>\r\n    )\r\n}","import './App.css';\n\nimport React from 'react';\nimport Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  return (\n      <Dashboard />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}